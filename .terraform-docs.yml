formatter: markdown table

content: |
  # AWS Elastic File System Module

  ## Usage
  
  Here is an example HCL code snippet that demonstrates how to use AWS EFS Terraform module:

  ```hcl
  module "efs" {
    source = "../.."
  
    # Basic EFS configuration
    name                            = "example-elastic-file-system"
    creation_token                  = "example-creation-token"
    encrypted                       = true
    enable_automatic_backups        = true
    kms_key_id                      = "example-kms-key-id"
    performance_mode                = "generalPurpose"
    throughput_mode                 = "provisioned"
    provisioned_throughput_in_mibps = 100
  
    # Lifecycle management
    lifecycle_policy = {
      transition_to_ia                    = "AFTER_7_DAYS"
      transition_to_primary_storage_class = "AFTER_1_ACCESS"
    }
  
    # Access points
    access_points = {
      example_posix_user = {
        ac_name = "example-posix-user"
        posix_user = {
          gid            = 1001
          uid            = 1001
          secondary_gids = [1002, 1003, 1004]
        }
        root_directory = {
          path = "/example-posix-user"
          creation_info = {
            owner_gid   = 1001
            owner_uid   = 1001
            permissions = "755"
          }
        }
      }
    }

    # Security Group Configuration for EFS Mount Targets
    security_group_configuration = {
      description = "Security group for EFS mount targets"
      name_prefix = "efs-"
      vpc_id      = "vpc-1234567890"

      # Ingress rules are automatically configured for EFS port 2049
      ingress_rules = {
        allow_vpc = {
          description = "Allow NFS access from VPC"
          cidr_blocks = ["10.0.0.0/16"]
        }
        allow_specific_sg = {
          description              = "Allow NFS from specific security group"
          source_security_group_id = "example-sg-0"
        }
      }

      # Configurable egress rules
      egress_rules = {
        allow_all = {
          description = "Allow all outbound traffic"
          protocol    = "-1"
          from_port   = "0"
          to_port     = "0"
          cidr_blocks = ["0.0.0.0/0"]
        }
      }
    }
    
    # Mount targets in multiple AZs
    mount_targets = [
      {
        subnet_id       = "example-subnet-id-1"
        security_groups = ["example-sg-id-1", "example-sg-id-2"]
        timeouts = {
          create = "50m"
          delete = "40m"
        }
      },
      {
        subnet_id       = "example-subnet-id-2"
        security_groups = ["example-sg-id-3", "example-sg-id-4"]
        timeouts = {
          create = "40m"
          delete = "30m"
        }
      }
    ]
  
    # Cross-region replication
    replication_configuration = {
      region                 = "us-east-1"
      availability_zone_name = "us-east-1a"
      timeouts = {
        create = "1h"
        delete = "30m"
      }
    }
  
    # File System IAM policy
    policy_configuration = {
      version   = "2012-10-17"
      policy_id = "example-policy-id"
      statements = [
        {
          sid = "example-sid"
          actions = [
            "elasticfilesystem:ClientMount",
            "elasticfilesystem:ClientWrite"
          ]
          principals = [
            {
              type        = "AWS"
              identifiers = ["arn:aws:iam::111122223333:role/ExampleEFSRole"]
            }
          ]
        }
      ]
      bypass_policy_lockout_safety_check = false
    }
  
    tags = {
      CreatedBy = "Terraform"
    }
  }
  ```

  ## Examples

  [`Examples`](https://github.com/stasyk003/terraform-aws-efs-module/tree/main/examples) demonstrate use-cases and configurations of the module. They serve both as a reference for users implementing the module and as integration tests for validating module functionality.

  - [Complete](https://github.com/stasyk003/terraform-aws-efs-module/tree/main/examples/complete)
  - [Default](https://github.com/stasyk003/terraform-aws-efs-module/tree/main/examples/default)
  
  {{ .Content }}

output:
  file: README.md
  mode: inject
  template: |-
    <!-- BEGIN_TF_DOCS -->
    {{ .Content }}
    <!-- END_TF_DOCS -->
